import 'package:flutter/material.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert'; // To convert List to String and vice-versa
import 'package:intl/intl.dart';

class NotificationPage extends StatefulWidget {
  const NotificationPage({Key? key}) : super(key: key);

  @override
  _NotificationPageState createState() => _NotificationPageState();
}

class _NotificationPageState extends State<NotificationPage> {
  final FirebaseMessaging _firebaseMessaging = FirebaseMessaging.instance;
  final List<Map<String, dynamic>> _notifications = [];

  @override
  void initState() {
    super.initState();
    _setupFirebaseMessaging();
    _loadNotifications(); // Load stored notifications when the app starts
  }

  void _setupFirebaseMessaging() {
    _firebaseMessaging.requestPermission(
      alert: true,
      badge: true,
      sound: true,
    );

    // Get the FCM token
    _firebaseMessaging.getToken().then((String? token) {
      print("Firebase Messaging Token: $token");
    });

    // Handle foreground messages
    FirebaseMessaging.onMessage.listen((RemoteMessage message) {
      _handleMessage(message);
    });

    // Handle background messages
    FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);
  }

  // Function to handle messages
  void _handleMessage(RemoteMessage message) {
    if (message.notification != null) {
      String? title = message.notification!.title;
      String? body = message.notification!.body;

      if (title != null && body != null) {
        final newNotification = {
          "title": title,
          "body": body,
          "time": DateTime.now().toIso8601String(),
        };

        setState(() {
          _notifications.add(newNotification);
        });

        _saveNotifications();
      }
    }
  }

  // Background message handler
  static Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
    // Call the _handleMessage function to save notifications in background
    _NotificationPageState()._handleMessage(message);
  }

  // Load notifications from SharedPreferences
  void _loadNotifications() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    String? notificationsData = prefs.getString('notifications');

    if (notificationsData != null) {
      List<dynamic> storedNotifications = jsonDecode(notificationsData);
      setState(() {
        _notifications.addAll(storedNotifications
            .map((notification) => Map<String, dynamic>.from(notification))
            .toList());
      });
    }
  }

  // Save notifications to SharedPreferences
  void _saveNotifications() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    prefs.setString('notifications', jsonEncode(_notifications));
  }

  // Clear notifications from both the UI and SharedPreferences
  void _clearAllNotifications() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.remove('notifications'); // Remove notifications from SharedPreferences

    setState(() {
      _notifications.clear(); // Clear the notifications list in the state
    });
  }

  // Filter notifications received in the last 2 days
  List<Map<String, dynamic>> _getRecentNotifications() {
    final now = DateTime.now();
    return _notifications
        .where((notification) =>
            now
                .difference(DateTime.parse(notification['time'] as String))
                .inDays <
            2)
        .toList();
  }

  String timeAgo(DateTime dateTime) {
    final difference = DateTime.now().difference(dateTime);

    if (difference.inDays > 0) {
      return '${difference.inDays} day${difference.inDays > 1 ? 's' : ''} ago';
    } else if (difference.inHours > 0) {
      return '${difference.inHours} hour${difference.inHours > 1 ? 's' : ''} ago';
    } else if (difference.inMinutes > 0) {
      return '${difference.inMinutes} minute${difference.inMinutes > 1 ? 's' : ''} ago';
    } else {
      return 'Just now';
    }
  }

  @override
  Widget build(BuildContext context) {
    final recentNotifications = _getRecentNotifications();
    
    return Scaffold(
      appBar: AppBar(
        title: const Text('Notifications'),
        actions: [
          IconButton(
            icon: const Icon(Icons.clear_all),
            onPressed: _clearAllNotifications,
          ),
        ],
      ),
      body: recentNotifications.isEmpty
          ? const Center(child: Text('No notifications'))
          : ListView.builder(
              itemCount: recentNotifications.length,
              itemBuilder: (context, index) {
                final notification = recentNotifications[index];
                final time = DateTime.parse(notification['time']);
                return ListTile(
                  title: Text(notification['title']),
                  subtitle: Text('${notification['body']} \n${timeAgo(time)}'),
                );
              },
            ),
    );
  }
}
