import 'package:bike_project/screens/profile.dart';
import 'package:bike_project/screens/support.dart';
import 'package:flutter/material.dart';
import 'dart:math';

class CircularLightAnimation extends StatefulWidget {
  final int batteryPercentage;

  CircularLightAnimation({required this.batteryPercentage});

  @override
  _CircularLightAnimationState createState() => _CircularLightAnimationState();
}

class _CircularLightAnimationState extends State<CircularLightAnimation>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      vsync: this,
      duration: const Duration(seconds: 2),
    )..repeat();
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Center(
      child: CustomPaint(
        size: const Size(91, 0), // Adjust size as needed
        painter: CircularLightPainter(
          animation: _controller,
          batteryPercentage: widget.batteryPercentage,
        ),
      ),
    );
  }
}

class CircularLightPainter extends CustomPainter {
  final Animation<double> animation;
  final int batteryPercentage;

  CircularLightPainter({
    required this.animation,
    required this.batteryPercentage,
  }) : super(repaint: animation);

  @override
  void paint(Canvas canvas, Size size) {
    final Paint paint = Paint()
      ..style = PaintingStyle.stroke
      ..strokeWidth = 4.0
      ..shader = SweepGradient(
        colors: [
          const Color.fromARGB(0, 0, 38, 255),
          Color.fromARGB(255, 223, 252, 8).withOpacity(0.5),
          Color.fromARGB(255, 0, 255, 30),
          Color.fromARGB(255, 240, 46, 20).withOpacity(0.5),
          Colors.transparent,
        ],
        stops: const [0.0, 0.2, 0.5, 0.8, 1.0],
        startAngle: 0.0,
        endAngle: 2 * pi,
        transform: GradientRotation(animation.value * 2 * pi),
      ).createShader(Rect.fromLTWH(0, 0, size.width, size.height));

    final Offset center = Offset(size.width / 2, size.height / 2);
    final double radius = size.width / 2;

    canvas.drawCircle(center, radius, paint);

    // Draw the battery percentage text in the center
    final textPainter = TextPainter(
      text: TextSpan(
        text: '$batteryPercentage%',
        style: const TextStyle(
          fontSize: 30.0,
          color: Color.fromARGB(255, 0, 0, 0),
          fontWeight: FontWeight.bold,
        ),
      ),
      textDirection: TextDirection.ltr,
    );

    textPainter.layout();
    final textOffset = Offset(
      center.dx - textPainter.width / 2,
      center.dy - textPainter.height / 2,
    );

    textPainter.paint(canvas, textOffset);
  }

  @override
  bool shouldRepaint(CircularLightPainter oldDelegate) {
    return true;
  }
}

class HomePage extends StatelessWidget {
  const HomePage({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SafeArea(
        child: Stack(
          children: [
            Positioned.fill(
              child: Padding(
                padding: EdgeInsetsDirectional.fromSTEB(176, 0, 0, 0),
                child: ClipRRect(
                  borderRadius: BorderRadius.circular(8),
                  child: Image.asset(
                    'assets/images/image_bike.png',
                    width: 420,
                    height: 1000,
                    fit: BoxFit.contain,
                  ),
                ),
              ),
            ),
            Positioned(
              top: 490,
              left: 0,
              right: 10,
              child: Align(
                alignment: Alignment.center,
                child: Transform.rotate(
                  angle: -90 *
                      (3.1415926535897932 / 180), // Convert degrees to radians
                  child: Text(
                    'Origin',
                    style: TextStyle(
                      fontFamily: 'Prompt',
                      fontSize: 77,
                      letterSpacing: 0,
                      color: Color(0x532D2A2A),
                      fontWeight: FontWeight.w700,
                    ),
                  ),
                ),
              ),
            ),
            Align(
              alignment: AlignmentDirectional(-1, 0),
              child: ClipRRect(
                borderRadius: BorderRadius.circular(8),
                child: Image.asset(
                  'assets/images/Mainside.png',
                  width: 162,
                  height: 1000,
                  fit: BoxFit.cover,
                ),
              ),
            ),
            Align(
              alignment: AlignmentDirectional(-1, 0),
              child: Padding(
                padding: EdgeInsetsDirectional.fromSTEB(16, 0, 0, 40),
                child: ClipRRect(
                  borderRadius: BorderRadius.circular(8),
                  child: Image.asset(
                    'assets/images/Ellipseh.png',
                    width: 128,
                    height: 128,
                    fit: BoxFit.contain,
                  ),
                ),
              ),
            ),
            Align(
              alignment: AlignmentDirectional(-1, 0),
              child: Padding(
                padding: EdgeInsetsDirectional.fromSTEB(25, 0, 0, 40),
                child: ClipRRect(
                  borderRadius: BorderRadius.circular(8),
                  child: Image.asset(
                    'assets/images/Ellipseho.png',
                    width: 111,
                    height: 111,
                    fit: BoxFit.contain,
                  ),
                ),
              ),
            ),
            Align(
              alignment: AlignmentDirectional(-1, 0),
              child: Padding(
                padding: EdgeInsetsDirectional.fromSTEB(34, 0, 0, 40),
                child: ClipRRect(
                  borderRadius: BorderRadius.circular(8),
                  child: Image.asset(
                    'assets/images/Ellipsehom.png',
                    width: 91,
                    height: 91,
                    fit: BoxFit.contain,
                  ),
                ),
              ),
            ),
            // Add CircularLightAnimation widget here
            Positioned(
              top: 50,
              left: 16,
              child: CircularLightAnimation(batteryPercentage: 75), // Example battery percentage
            ),
          ],
        ),
      ),
    );
  }
}

class MyHome extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    Size screenSize = MediaQuery.of(context).size;

    return Scaffold(
      // Creating a drawer
      drawer: Drawer(
        child: ListView(
          padding: EdgeInsets.zero,
          children: <Widget>[
            Stack(
              children: [
                Positioned(
                  left: -screenSize.width * 0.12,
                  top: -screenSize.height * 0,
                  child: Image.asset(
                    'assets/images/Group.png',
                    width: screenSize.width * 0.8,
                    height: screenSize.height * 0.3,
                    fit: BoxFit.contain,
                  ),
                ),
                Align(
                  alignment: Alignment.bottomLeft,
                  child: Padding(
                    padding: EdgeInsets.only(top: 70.0, bottom: 120, left: 50.0),
                    child: Text(
                      'Menu',
                      style: TextStyle(
                        color: Color.fromARGB(255, 255, 255, 255),
                        fontSize: 24,
                      ),
                    ),
                  ),
                ),
              ],
            ),
            Padding(
              padding: const EdgeInsets.only(top: 20.0, left: 16.0),
              child: ListTile(
                leading: Icon(Icons.person),
                title: Text('Profile'),
                onTap: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(builder: (context) => ProfilePage()),
                  );
                  // Implement action for profile
                },
              ),
            ),
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16.0),
              child: ListTile(
                leading: Icon(Icons.settings),
                title: Text('Service'),
                onTap: () {
                  // Implement action for Service
                },
              ),
            ),
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16.0),
              child: ListTile(
                leading: Icon(Icons.directions_bike),
                title: Text('Bike Details'),
                onTap: () {
                  // Implement action for Bike Details
                },
              ),
            ),
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16.0),
              child: ListTile(
                leading: Icon(Icons.location_on_outlined),
                title: Text('Ride History'),
                onTap: () {
                  // Implement action for Ride History
                },
              ),
            ),
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16.0),
              child: ListTile(
                leading: Icon(Icons.book_outlined),
                title: Text('Manuals'),
                onTap: () {
                  // Implement action for Manuals
                },
              ),
            ),
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16.0),
              child: ListTile(
                leading: Icon(Icons.support),
                title: Text('Support'),
                onTap: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(builder: (context) => SupportPage()),
                  );
                  // Implement action for Support
                },
              ),
            ),
            // Add more Padding widgets with ListTile children for additional items
          ],
        ),
      ),
      body: HomePage(), // Replaced body with HomePage
      // Customizing the FloatingActionButton to display three dots horizontally
      floatingActionButton: Builder(
        builder: (BuildContext context) {
          return Padding(
            padding: const EdgeInsets.only(top: 150.0), // Adjust the top padding as needed
            child: FloatingActionButton(
              onPressed: () {
                Scaffold.of(context).openDrawer();
              },
              // Using a custom shape to make the button circular
              shape: CircleBorder(
                side: BorderSide(
                  color: Color.fromARGB(255, 183, 195, 255), // Border color
                  width: 1.5, // Border width
                ),
              ),
              // Setting a background color for the button
              backgroundColor: Colors.blue,
              // Adding three dots horizontally
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: [
                  Container(
                    width: 7.0,
                    height: 7.0,
                    decoration: BoxDecoration(
                      shape: BoxShape.circle,
                      color: Colors.white,
                    ),
                  ),
                  Container(
                    width: 7.0,
                    height: 7.0,
                    decoration: BoxDecoration(
                      shape: BoxShape.circle,
                      color: Colors.white,
                    ),
                  ),
                  Container(
                    width: 7.0,
                    height: 7.0,
                    decoration: BoxDecoration(
                      shape: BoxShape.circle,
                      color: Colors.white,
                    ),
                  ),
                ],
              ),
            ),
          );
        },
      ),
      // Setting the position of the FloatingActionButton to the top-left corner
      floatingActionButtonLocation: FloatingActionButtonLocation.startTop,
    );
  }
}
