class MyHome extends StatelessWidget {
  const MyHome({Key? key}) : super(key: key);
  static const platform = MethodChannel('com.example.bike_project/bluetooth');

  Future<void> _enableBluetooth() async {
    try {
      await platform.invokeMethod('enableBluetooth');
    } on PlatformException catch (e) {
      print("Failed to enable Bluetooth: '${e.message}'.");
    }
  }

  @override
  Widget build(BuildContext context) {
    final responseBody = ModalRoute.of(context)?.settings.arguments;

    Map<String, dynamic> responseJson = {};
    if (responseBody is String) {
      // If the responseBody is a String, try to decode it
      try {
        responseJson = jsonDecode(responseBody);
      } catch (e) {
        print('Error decoding JSON: $e');
        responseJson = {
          'error': 'Invalid response format',
          'responseBody': responseBody,
        };
      }
    } else if (responseBody is Map<String, dynamic>) {
      // If the responseBody is already a Map
      responseJson = responseBody;
    } else {
      // If the responseBody is neither String nor Map
      responseJson = {
        'error': 'Invalid response type',
        'responseBody': responseBody.toString(),
      };
    }

    final sessionId = responseJson['session_id'] ?? '';
    final vehicleId =
        responseJson['vehicles'] != null && responseJson['vehicles'].isNotEmpty
            ? responseJson['vehicles'][0]['vehicle_id'] ?? ''
            : '';

    final screenWidth = MediaQuery.of(context).size.width;
    final screenHeight = MediaQuery.of(context).size.height;
    return Scaffold(
      drawer: Drawer(
        child: ListView(
          padding: EdgeInsets.zero,
          children: <Widget>[
            Stack(
              children: [
                Align(
                  alignment: const AlignmentDirectional(-2, -0.9),
                  child: ClipRRect(
                    child: Image.asset(
                      'assets/images/headline.png',
                      width: screenWidth * 0.82, // 90% of screen width
                      height: screenHeight * 0.3, // 30% of screen height
                      fit: BoxFit.contain,
                    ),
                  ),
                ),
                Padding(
                  padding: EdgeInsets.only(
                    top: screenHeight * 0.12, // 15% of screen height
                    bottom: screenHeight * 0.025, // 2.5% of screen height
                    right: screenWidth * 0.25, // 35% of screen width
                  ),
                  child: const Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Text(
                        'Menu',
                        style: TextStyle(
                          fontSize: 28,
                          fontFamily: 'Goldman',
                          color: Color.fromARGB(255, 255, 255, 255),
                          fontWeight: FontWeight.bold,
                          shadows: [
                            Shadow(
                              offset: Offset(2.0, 3.0),
                              blurRadius: 3.0,
                              color: Color.fromARGB(119, 0, 0, 0),
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                ),
                const Align(
                  alignment: Alignment.bottomLeft,
                  child: Padding(
                    padding:
                        EdgeInsets.only(top: 110.0, bottom: 115, left: 80.0),
                  ),
                ),
              ],
            ),
            ..._buildListTiles(context),
          ],
        ),
      ),
